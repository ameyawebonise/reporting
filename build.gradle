group 'org.kaddiya'
version '1.0.0-SNAPSHOT'

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'war'
apply plugin: 'codenarc'
apply plugin: 'jacoco'
apply plugin: 'nu.studer.jooq'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'org.akhikhl.gretty:gretty:+'
        classpath 'org.liquibase:liquibase-gradle-plugin:1.2.1'
        classpath 'mysql:mysql-connector-java:5.1.39'
        classpath 'nu.studer:gradle-jooq-plugin:1.0.5'
    }
    configurations.classpath {
        resolutionStrategy {
            forcedModules = [
                    'org.jooq:jooq:3.8.2',
                    'org.jooq:jooq-meta:3.8.2',
                    'org.jooq:jooq-codegen:3.8.2'
            ]
        }
    }
}

configurations {
    liquibase
    testRuntime.exclude group: "org.slf4j", module: "slf4j-log4j12"
    all*.resolutionStrategy {
        force "org.codehaus.groovy:groovy-all:2.4.6"
    }
}

gretty {
    systemProperties = System.properties
    servletContainer = 'tomcat8'
    contextPath = ""
    serverConfigFile = "${projectDir}/server.xml"
    jvmArgs = ['-Djava.naming.factory.initial=org.apache.naming.java.javaURLContextFactory', '-Djava.naming.factory.url.pkgs=org.apache.naming']
    managedClassReload = true
}


repositories {
    mavenLocal()
    mavenCentral()
    jcenter()

}

dependencies {

    compile 'com.google.inject:guice-parent:3.0'
    compile 'restling:restling-core:0.0.7'

    compile "org.codehaus.groovy:groovy-all:2.4.6"
    compile 'org.jooq:jooq:3.8.2'
    compile 'org.jooq:jooq-meta:3.8.2'
    compile 'org.jooq:jooq-codegen:3.8.2'
    compile 'mysql:mysql-connector-java:5.1.39'

    // Using sfl4j allows us to replace different loggers later, if desired
    compile 'org.slf4j:slf4j-api:1.7.2'
    // sfl4j is just a facade for loggers. To actually get logging to work, you need to
    // tie it in with some actual implementation, e.g., logback
    compile 'ch.qos.logback:logback-classic:1.0.9'
    compile 'ch.qos.logback:logback-core:1.0.9'

/*
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
    testCompile 'org.apache.tomcat:tomcat-catalina:9.0.0.M3'

    testRuntime "cglib:cglib-nodep:[3.2,4)"          // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:[2.1,3)"
*/
    def tomcatVersion = "8.0.26"
    grettyRunnerTomcat8 "com.zaxxer:HikariCP:2.4.0"
    grettyRunnerTomcat8 "mysql:mysql-connector-java:5.1.39"
    grettyRunnerTomcat8 "org.apache.tomcat:tomcat-api:$tomcatVersion"
    grettyRunnerTomcat8 "org.apache.tomcat:tomcat-jdbc:$tomcatVersion"
    grettyRunnerTomcat8 "org.apache.tomcat:tomcat-dbcp:$tomcatVersion"

    //liquibase properties
    liquibase 'mysql:mysql-connector-java:5.1.39'
    liquibase 'org.liquibase:liquibase-core:3.4.0'

    testCompile 'com.h2database:h2:1.3.168'
    testCompile 'org.liquibase:liquibase-core:3.4.0'

    def slf4jVersion = "[1.7.12,1.8)"
    def slf4jSimple = "org.slf4j:slf4j-simple:$slf4jVersion"

    // Enable simply logging to stdout in testing
    testRuntime slf4jSimple

}

jooq {
    File commonsSqlDir = new File("src/main/java/org/kaddiya/reporting/sql/commons")
    //deleting the  commons sqls that were generated as part of previous build
    if (commonsSqlDir.exists()) {
        commonsSqlDir.deleteDir()
    }
    proof(sourceSets.main) {
        jdbc {
            driver = "${databaseDriver}"
            url = "${databaseUrl}"
            user = "${databaseUser}"
            password = "${databasePass}"
        }
        generator {
            database {
                name = "${targetDatabaseName}"
                inputSchema = "${targetDatabaseInputSchemaName}"
            }
            generate {
                relations = true
                deprecated = false
                pojos = true
                pojosEqualsAndHashCode = true
                immutablePojos = false
            }
            target {
                packageName = "${jooqTargetPackageName}"
                directory = "${jooqTargetDirectory}"
            }
        }
    }
}

//task for migrate
task migrate(type: JavaExec) {
    group = "Liquibase"
    classpath configurations.liquibase
    main = "liquibase.integration.commandline.Main"
    args "--changeLogFile=${dbMasterChangelog}"
    args "--username=${databaseUser}"
    args "--password=${databasePass}"
    args "--url=${databaseUrl}"
    args "--driver=com.mysql.jdbc.Driver"
    args "migrate"
}


tasks.compileJava.dependsOn tasks.generateProofJooqSchemaSource
tasks.generateProofJooqSchemaSource.dependsOn tasks.migrate