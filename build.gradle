/*
 * This build file was auto generated by running the Gradle 'init' task
 * This generated file contains a sample Groovy project to get you started.
 * For more details take a look at the Groovy Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.3/userguide/tutorial_groovy_projects.html
 */

// Apply the groovy plugin to add support for Groovy
apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'org.akhikhl.gretty'
apply plugin : 'nu.studer.jooq'

// Build script is need for plugin:
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.liquibase:liquibase-gradle-plugin:1.2.1'
        classpath 'org.akhikhl.gretty:gretty:+'
        classpath 'mysql:mysql-connector-java:5.1.39'
        classpath 'nu.studer:gradle-jooq-plugin:1.0.5'
    }
    configurations.classpath {
        resolutionStrategy {
            forcedModules = [
                    'org.jooq:jooq:3.8.2',
                    'org.jooq:jooq-meta:3.8.2',
                    'org.jooq:jooq-codegen:3.8.2'
            ]
        }
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {

    // We use the latest groovy 2.x version for building this library
    compile 'restling:restling-core:0.0.7'
    compile 'org.jooq:jooq:3.8.2'
    compile 'org.jooq:jooq-meta:3.8.2'
    compile 'org.jooq:jooq-codegen:3.8.2'

    // will go to tomcat classpath
    def tomcatVersion = "8.0.26"
    grettyRunnerTomcat8 "com.zaxxer:HikariCP:2.4.0"
    grettyRunnerTomcat8 "mysql:mysql-connector-java:5.1.6"
    grettyRunnerTomcat8 "org.apache.tomcat:tomcat-api:$tomcatVersion"
    grettyRunnerTomcat8 "org.apache.tomcat:tomcat-jdbc:$tomcatVersion"
    grettyRunnerTomcat8 "org.apache.tomcat:tomcat-dbcp:$tomcatVersion"

    //dep for liquibase

    // We use the awesome Spock testing and specification framework
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile 'junit:junit:4.12'

}

configurations {
    liquibase
    all*.exclude group: 'org.slf4j', module: 'slf4j-nop'
    all*.exclude group: 'org.slf4j', module: 'log4j-over-slf4j'

    // Ensure we're not bleeding over
    all*.resolutionStrategy {
        force 'org.codehaus.groovy:groovy-all:2.4.7'
    }
}

jooq {
    File commonsSqlDir = new File("src/main/java/com/proof/sql/commons")
    //deleting the  commons sqls that were generated as part of previous build
    if (commonsSqlDir.exists()) {
        commonsSqlDir.deleteDir()
    }
    proof(sourceSets.main) {
        jdbc {
            driver = "${databaseDriver}"
            url = "${databaseUrl}"
            user = "${databaseUser}"
            password = "${databasePass}"
        }
        generator {
            database {
                name = "${targetDatabaseName}"
                inputSchema = "${targetDatabaseInputSchemaName}"
            }
            generate {
                relations = true
                deprecated = false
                pojos = true
                pojosEqualsAndHashCode = true
                immutablePojos = false
            }
            target {
                packageName = "${jooqTargetPackageName}"
                directory = "${jooqTargetDirectory}"
            }
        }
    }
}

//task for migrate
task migrate(type: JavaExec) {
    group = "Liquibase"
    classpath configurations.liquibase
    main = "liquibase.integration.commandline.Main"
    args "--changeLogFile=${dbMasterChangelog}"
    args "--username=${databaseUser}"
    args "--password=${databasePass}"
    args "--url=${databaseUrl}"
    args "--driver=com.mysql.jdbc.Driver"
    args "migrate"
}

gretty {
    systemProperties = System.properties
    servletContainer = 'tomcat8'
    contextPath = ""
    serverConfigFile = "${projectDir}/server.xml"
    jvmArgs = ['-Djava.naming.factory.initial=org.apache.naming.java.javaURLContextFactory', '-Djava.naming.factory.url.pkgs=org.apache.naming']
    managedClassReload = true
}

test {
    systemProperties = System.properties
}
tasks.compileJava.dependsOn tasks.generateProofJooqSchemaSource
tasks.generateProofJooqSchemaSource.dependsOn tasks.migrate


