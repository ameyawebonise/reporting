/**
 * This class is generated by jOOQ
 */
package org.kaddiya.reporting.sql.commons.tables;


import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.kaddiya.reporting.sql.commons.Keys;
import org.kaddiya.reporting.sql.commons.Proof;
import org.kaddiya.reporting.sql.commons.enums.CalculationVisibility;
import org.kaddiya.reporting.sql.commons.tables.records.CalculationRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Calculation extends TableImpl<CalculationRecord> {

    private static final long serialVersionUID = -1184329870;

    /**
     * The reference instance of <code>proof.calculation</code>
     */
    public static final Calculation CALCULATION = new Calculation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CalculationRecord> getRecordType() {
        return CalculationRecord.class;
    }

    /**
     * The column <code>proof.calculation.CALCULATION_ID</code>.
     */
    public final TableField<CalculationRecord, Integer> CALCULATION_ID = createField("CALCULATION_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.calculation.CALCULATION_NAME</code>.
     */
    public final TableField<CalculationRecord, String> CALCULATION_NAME = createField("CALCULATION_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>proof.calculation.USER_ID</code>.
     */
    public final TableField<CalculationRecord, Integer> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.calculation.CALCULATION_TYPE_ID</code>.
     */
    public final TableField<CalculationRecord, Integer> CALCULATION_TYPE_ID = createField("CALCULATION_TYPE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.calculation.START_DATE</code>.
     */
    public final TableField<CalculationRecord, Date> START_DATE = createField("START_DATE", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>proof.calculation.CREATED_ON</code>.
     */
    public final TableField<CalculationRecord, Timestamp> CREATED_ON = createField("CREATED_ON", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>proof.calculation.VISIBILITY</code>.
     */
    public final TableField<CalculationRecord, CalculationVisibility> VISIBILITY = createField("VISIBILITY", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(org.kaddiya.reporting.sql.commons.enums.CalculationVisibility.class), this, "");

    /**
     * Create a <code>proof.calculation</code> table reference
     */
    public Calculation() {
        this("calculation", null);
    }

    /**
     * Create an aliased <code>proof.calculation</code> table reference
     */
    public Calculation(String alias) {
        this(alias, CALCULATION);
    }

    private Calculation(String alias, Table<CalculationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Calculation(String alias, Table<CalculationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Proof.PROOF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CalculationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CALCULATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CalculationRecord> getPrimaryKey() {
        return Keys.KEY_CALCULATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CalculationRecord>> getKeys() {
        return Arrays.<UniqueKey<CalculationRecord>>asList(Keys.KEY_CALCULATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CalculationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CalculationRecord, ?>>asList(Keys.FK_CALCULATION_USER_ID, Keys.FK_CALCULATION_CALCULATION_TYPE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Calculation as(String alias) {
        return new Calculation(alias, this);
    }

    /**
     * Rename this table
     */
    public Calculation rename(String name) {
        return new Calculation(name, null);
    }
}
