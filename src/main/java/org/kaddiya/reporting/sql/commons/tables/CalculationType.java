/**
 * This class is generated by jOOQ
 */
package org.kaddiya.reporting.sql.commons.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.kaddiya.reporting.sql.commons.Keys;
import org.kaddiya.reporting.sql.commons.Proof;
import org.kaddiya.reporting.sql.commons.tables.records.CalculationTypeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CalculationType extends TableImpl<CalculationTypeRecord> {

    private static final long serialVersionUID = 298786288;

    /**
     * The reference instance of <code>proof.calculation_type</code>
     */
    public static final CalculationType CALCULATION_TYPE = new CalculationType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CalculationTypeRecord> getRecordType() {
        return CalculationTypeRecord.class;
    }

    /**
     * The column <code>proof.calculation_type.CALCULATION_TYPE_ID</code>.
     */
    public final TableField<CalculationTypeRecord, Integer> CALCULATION_TYPE_ID = createField("CALCULATION_TYPE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.calculation_type.CALCULATION_TYPE_NAME</code>.
     */
    public final TableField<CalculationTypeRecord, String> CALCULATION_TYPE_NAME = createField("CALCULATION_TYPE_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>proof.calculation_type.CALCULATION_TYPE_DESCRIPTION</code>.
     */
    public final TableField<CalculationTypeRecord, String> CALCULATION_TYPE_DESCRIPTION = createField("CALCULATION_TYPE_DESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * Create a <code>proof.calculation_type</code> table reference
     */
    public CalculationType() {
        this("calculation_type", null);
    }

    /**
     * Create an aliased <code>proof.calculation_type</code> table reference
     */
    public CalculationType(String alias) {
        this(alias, CALCULATION_TYPE);
    }

    private CalculationType(String alias, Table<CalculationTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private CalculationType(String alias, Table<CalculationTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Proof.PROOF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CalculationTypeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CALCULATION_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CalculationTypeRecord> getPrimaryKey() {
        return Keys.KEY_CALCULATION_TYPE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CalculationTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<CalculationTypeRecord>>asList(Keys.KEY_CALCULATION_TYPE_PRIMARY, Keys.KEY_CALCULATION_TYPE_CALCULATION_TYPE_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalculationType as(String alias) {
        return new CalculationType(alias, this);
    }

    /**
     * Rename this table
     */
    public CalculationType rename(String name) {
        return new CalculationType(name, null);
    }
}
