/**
 * This class is generated by jOOQ
 */
package org.kaddiya.reporting.sql.commons.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.kaddiya.reporting.sql.commons.Keys;
import org.kaddiya.reporting.sql.commons.Proof;
import org.kaddiya.reporting.sql.commons.enums.DataSetTimeseriesInterval;
import org.kaddiya.reporting.sql.commons.tables.records.DataSetRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataSet extends TableImpl<DataSetRecord> {

    private static final long serialVersionUID = -602074107;

    /**
     * The reference instance of <code>proof.data_set</code>
     */
    public static final DataSet DATA_SET = new DataSet();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataSetRecord> getRecordType() {
        return DataSetRecord.class;
    }

    /**
     * The column <code>proof.data_set.DATA_SET_ID</code>.
     */
    public final TableField<DataSetRecord, Integer> DATA_SET_ID = createField("DATA_SET_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.data_set.DATA_SET_OWNER_ID</code>.
     */
    public final TableField<DataSetRecord, Integer> DATA_SET_OWNER_ID = createField("DATA_SET_OWNER_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.data_set.TITLE</code>.
     */
    public final TableField<DataSetRecord, String> TITLE = createField("TITLE", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>proof.data_set.FILE_PATH</code>.
     */
    public final TableField<DataSetRecord, String> FILE_PATH = createField("FILE_PATH", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * The column <code>proof.data_set.UPLOADED_AT</code>.
     */
    public final TableField<DataSetRecord, Timestamp> UPLOADED_AT = createField("UPLOADED_AT", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>proof.data_set.TIMESERIES_INTERVAL</code>.
     */
    public final TableField<DataSetRecord, DataSetTimeseriesInterval> TIMESERIES_INTERVAL = createField("TIMESERIES_INTERVAL", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(org.kaddiya.reporting.sql.commons.enums.DataSetTimeseriesInterval.class), this, "");

    /**
     * Create a <code>proof.data_set</code> table reference
     */
    public DataSet() {
        this("data_set", null);
    }

    /**
     * Create an aliased <code>proof.data_set</code> table reference
     */
    public DataSet(String alias) {
        this(alias, DATA_SET);
    }

    private DataSet(String alias, Table<DataSetRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataSet(String alias, Table<DataSetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Proof.PROOF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DataSetRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DATA_SET;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DataSetRecord> getPrimaryKey() {
        return Keys.KEY_DATA_SET_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DataSetRecord>> getKeys() {
        return Arrays.<UniqueKey<DataSetRecord>>asList(Keys.KEY_DATA_SET_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DataSetRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DataSetRecord, ?>>asList(Keys.FK_DATA_SET_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataSet as(String alias) {
        return new DataSet(alias, this);
    }

    /**
     * Rename this table
     */
    public DataSet rename(String name) {
        return new DataSet(name, null);
    }
}
