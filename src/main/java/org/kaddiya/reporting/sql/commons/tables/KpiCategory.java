/**
 * This class is generated by jOOQ
 */
package org.kaddiya.reporting.sql.commons.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.kaddiya.reporting.sql.commons.Keys;
import org.kaddiya.reporting.sql.commons.Proof;
import org.kaddiya.reporting.sql.commons.tables.records.KpiCategoryRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KpiCategory extends TableImpl<KpiCategoryRecord> {

    private static final long serialVersionUID = 1627839380;

    /**
     * The reference instance of <code>proof.kpi_category</code>
     */
    public static final KpiCategory KPI_CATEGORY = new KpiCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KpiCategoryRecord> getRecordType() {
        return KpiCategoryRecord.class;
    }

    /**
     * The column <code>proof.kpi_category.KPI_CATEGORY_ID</code>.
     */
    public final TableField<KpiCategoryRecord, Integer> KPI_CATEGORY_ID = createField("KPI_CATEGORY_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.kpi_category.KPI_ID</code>.
     */
    public final TableField<KpiCategoryRecord, Integer> KPI_ID = createField("KPI_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.kpi_category.CATEGORY_ID</code>.
     */
    public final TableField<KpiCategoryRecord, Integer> CATEGORY_ID = createField("CATEGORY_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>proof.kpi_category</code> table reference
     */
    public KpiCategory() {
        this("kpi_category", null);
    }

    /**
     * Create an aliased <code>proof.kpi_category</code> table reference
     */
    public KpiCategory(String alias) {
        this(alias, KPI_CATEGORY);
    }

    private KpiCategory(String alias, Table<KpiCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private KpiCategory(String alias, Table<KpiCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Proof.PROOF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<KpiCategoryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_KPI_CATEGORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<KpiCategoryRecord> getPrimaryKey() {
        return Keys.KEY_KPI_CATEGORY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<KpiCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<KpiCategoryRecord>>asList(Keys.KEY_KPI_CATEGORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<KpiCategoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<KpiCategoryRecord, ?>>asList(Keys.FK_KPI_CATEGORY_KPI_ID, Keys.FK_KPI_CATEGORY_CATEGORY_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KpiCategory as(String alias) {
        return new KpiCategory(alias, this);
    }

    /**
     * Rename this table
     */
    public KpiCategory rename(String name) {
        return new KpiCategory(name, null);
    }
}
