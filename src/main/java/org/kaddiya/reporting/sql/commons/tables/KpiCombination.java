/**
 * This class is generated by jOOQ
 */
package org.kaddiya.reporting.sql.commons.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.kaddiya.reporting.sql.commons.Keys;
import org.kaddiya.reporting.sql.commons.Proof;
import org.kaddiya.reporting.sql.commons.enums.KpiCombinationVisibility;
import org.kaddiya.reporting.sql.commons.tables.records.KpiCombinationRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KpiCombination extends TableImpl<KpiCombinationRecord> {

    private static final long serialVersionUID = -819104907;

    /**
     * The reference instance of <code>proof.kpi_combination</code>
     */
    public static final KpiCombination KPI_COMBINATION = new KpiCombination();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KpiCombinationRecord> getRecordType() {
        return KpiCombinationRecord.class;
    }

    /**
     * The column <code>proof.kpi_combination.KPI_COMBINATION_ID</code>.
     */
    public final TableField<KpiCombinationRecord, Integer> KPI_COMBINATION_ID = createField("KPI_COMBINATION_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.kpi_combination.USER_ID</code>.
     */
    public final TableField<KpiCombinationRecord, Integer> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.kpi_combination.CAUSE_ID</code>.
     */
    public final TableField<KpiCombinationRecord, Integer> CAUSE_ID = createField("CAUSE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.kpi_combination.EFFECT_ID</code>.
     */
    public final TableField<KpiCombinationRecord, Integer> EFFECT_ID = createField("EFFECT_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.kpi_combination.UPLOADED_AT</code>.
     */
    public final TableField<KpiCombinationRecord, Timestamp> UPLOADED_AT = createField("UPLOADED_AT", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>proof.kpi_combination.VISIBILITY</code>.
     */
    public final TableField<KpiCombinationRecord, KpiCombinationVisibility> VISIBILITY = createField("VISIBILITY", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(org.kaddiya.reporting.sql.commons.enums.KpiCombinationVisibility.class), this, "");

    /**
     * Create a <code>proof.kpi_combination</code> table reference
     */
    public KpiCombination() {
        this("kpi_combination", null);
    }

    /**
     * Create an aliased <code>proof.kpi_combination</code> table reference
     */
    public KpiCombination(String alias) {
        this(alias, KPI_COMBINATION);
    }

    private KpiCombination(String alias, Table<KpiCombinationRecord> aliased) {
        this(alias, aliased, null);
    }

    private KpiCombination(String alias, Table<KpiCombinationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Proof.PROOF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<KpiCombinationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_KPI_COMBINATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<KpiCombinationRecord> getPrimaryKey() {
        return Keys.KEY_KPI_COMBINATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<KpiCombinationRecord>> getKeys() {
        return Arrays.<UniqueKey<KpiCombinationRecord>>asList(Keys.KEY_KPI_COMBINATION_PRIMARY, Keys.KEY_KPI_COMBINATION_UNIQUE_KEY_ON_USER_ID_AND_CAUSE_ID_AND_EFFECT_ID, Keys.KEY_KPI_COMBINATION_UNIQUE_KEY_ON_USER_ID_CAUSE_ID_EFFECT_ID_USER_DASHBOARD_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<KpiCombinationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<KpiCombinationRecord, ?>>asList(Keys.FK_KPI_COMBINATION_USER_ID, Keys.FK_KPI_COMBINATION_CAUSE_ID, Keys.FK_KPI_COMBINATION_EFFECT_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KpiCombination as(String alias) {
        return new KpiCombination(alias, this);
    }

    /**
     * Rename this table
     */
    public KpiCombination rename(String name) {
        return new KpiCombination(name, null);
    }
}
