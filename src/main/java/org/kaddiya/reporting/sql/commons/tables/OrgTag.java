/**
 * This class is generated by jOOQ
 */
package org.kaddiya.reporting.sql.commons.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.kaddiya.reporting.sql.commons.Keys;
import org.kaddiya.reporting.sql.commons.Proof;
import org.kaddiya.reporting.sql.commons.tables.records.OrgTagRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrgTag extends TableImpl<OrgTagRecord> {

    private static final long serialVersionUID = -316143840;

    /**
     * The reference instance of <code>proof.org_tag</code>
     */
    public static final OrgTag ORG_TAG = new OrgTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrgTagRecord> getRecordType() {
        return OrgTagRecord.class;
    }

    /**
     * The column <code>proof.org_tag.ORG_TAG_ID</code>.
     */
    public final TableField<OrgTagRecord, Integer> ORG_TAG_ID = createField("ORG_TAG_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.org_tag.ORGANISATION_ID</code>.
     */
    public final TableField<OrgTagRecord, Integer> ORGANISATION_ID = createField("ORGANISATION_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.org_tag.TAG_ID</code>.
     */
    public final TableField<OrgTagRecord, Integer> TAG_ID = createField("TAG_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>proof.org_tag</code> table reference
     */
    public OrgTag() {
        this("org_tag", null);
    }

    /**
     * Create an aliased <code>proof.org_tag</code> table reference
     */
    public OrgTag(String alias) {
        this(alias, ORG_TAG);
    }

    private OrgTag(String alias, Table<OrgTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrgTag(String alias, Table<OrgTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Proof.PROOF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OrgTagRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ORG_TAG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrgTagRecord> getPrimaryKey() {
        return Keys.KEY_ORG_TAG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrgTagRecord>> getKeys() {
        return Arrays.<UniqueKey<OrgTagRecord>>asList(Keys.KEY_ORG_TAG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OrgTagRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrgTagRecord, ?>>asList(Keys.FK_ORG_TAG_ORGANISATION_ID, Keys.FK_ORG_TAG_TAG_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrgTag as(String alias) {
        return new OrgTag(alias, this);
    }

    /**
     * Rename this table
     */
    public OrgTag rename(String name) {
        return new OrgTag(name, null);
    }
}
