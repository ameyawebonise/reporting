/**
 * This class is generated by jOOQ
 */
package org.kaddiya.reporting.sql.commons.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.kaddiya.reporting.sql.commons.Keys;
import org.kaddiya.reporting.sql.commons.Proof;
import org.kaddiya.reporting.sql.commons.enums.OrgUserStatus;
import org.kaddiya.reporting.sql.commons.tables.records.OrgUserRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrgUser extends TableImpl<OrgUserRecord> {

    private static final long serialVersionUID = 411192747;

    /**
     * The reference instance of <code>proof.org_user</code>
     */
    public static final OrgUser ORG_USER = new OrgUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrgUserRecord> getRecordType() {
        return OrgUserRecord.class;
    }

    /**
     * The column <code>proof.org_user.ORG_USER_ID</code>.
     */
    public final TableField<OrgUserRecord, Integer> ORG_USER_ID = createField("ORG_USER_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.org_user.ORGANISATION_ID</code>.
     */
    public final TableField<OrgUserRecord, Integer> ORGANISATION_ID = createField("ORGANISATION_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.org_user.USER_ID</code>.
     */
    public final TableField<OrgUserRecord, Integer> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.org_user.ROLE_ID</code>.
     */
    public final TableField<OrgUserRecord, Integer> ROLE_ID = createField("ROLE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.org_user.STATUS</code>.
     */
    public final TableField<OrgUserRecord, OrgUserStatus> STATUS = createField("STATUS", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(org.kaddiya.reporting.sql.commons.enums.OrgUserStatus.class), this, "");

    /**
     * The column <code>proof.org_user.CREATED_ON</code>.
     */
    public final TableField<OrgUserRecord, Timestamp> CREATED_ON = createField("CREATED_ON", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>proof.org_user.CREATED_BY</code>.
     */
    public final TableField<OrgUserRecord, Integer> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>proof.org_user</code> table reference
     */
    public OrgUser() {
        this("org_user", null);
    }

    /**
     * Create an aliased <code>proof.org_user</code> table reference
     */
    public OrgUser(String alias) {
        this(alias, ORG_USER);
    }

    private OrgUser(String alias, Table<OrgUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrgUser(String alias, Table<OrgUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Proof.PROOF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OrgUserRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ORG_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrgUserRecord> getPrimaryKey() {
        return Keys.KEY_ORG_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrgUserRecord>> getKeys() {
        return Arrays.<UniqueKey<OrgUserRecord>>asList(Keys.KEY_ORG_USER_PRIMARY, Keys.KEY_ORG_USER_UNIQUE_KEY_ON_ORGANISATION_ID_2c_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OrgUserRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrgUserRecord, ?>>asList(Keys.FK_ORG_USER_ORGANISATION_ID, Keys.FK_ORG_USER_USER_ID, Keys.FK_ORG_USER_ROLE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrgUser as(String alias) {
        return new OrgUser(alias, this);
    }

    /**
     * Rename this table
     */
    public OrgUser rename(String name) {
        return new OrgUser(name, null);
    }
}
