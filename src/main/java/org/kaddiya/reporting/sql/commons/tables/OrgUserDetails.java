/**
 * This class is generated by jOOQ
 */
package org.kaddiya.reporting.sql.commons.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.kaddiya.reporting.sql.commons.Keys;
import org.kaddiya.reporting.sql.commons.Proof;
import org.kaddiya.reporting.sql.commons.tables.records.OrgUserDetailsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrgUserDetails extends TableImpl<OrgUserDetailsRecord> {

    private static final long serialVersionUID = 1937698073;

    /**
     * The reference instance of <code>proof.org_user_details</code>
     */
    public static final OrgUserDetails ORG_USER_DETAILS = new OrgUserDetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrgUserDetailsRecord> getRecordType() {
        return OrgUserDetailsRecord.class;
    }

    /**
     * The column <code>proof.org_user_details.ORG_USER_DETAILS_ID</code>.
     */
    public final TableField<OrgUserDetailsRecord, Integer> ORG_USER_DETAILS_ID = createField("ORG_USER_DETAILS_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.org_user_details.ORG_USER_ID</code>.
     */
    public final TableField<OrgUserDetailsRecord, Integer> ORG_USER_ID = createField("ORG_USER_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.org_user_details.ALLOTED_CALCULATIONS</code>.
     */
    public final TableField<OrgUserDetailsRecord, Integer> ALLOTED_CALCULATIONS = createField("ALLOTED_CALCULATIONS", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>proof.org_user_details</code> table reference
     */
    public OrgUserDetails() {
        this("org_user_details", null);
    }

    /**
     * Create an aliased <code>proof.org_user_details</code> table reference
     */
    public OrgUserDetails(String alias) {
        this(alias, ORG_USER_DETAILS);
    }

    private OrgUserDetails(String alias, Table<OrgUserDetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrgUserDetails(String alias, Table<OrgUserDetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Proof.PROOF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OrgUserDetailsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ORG_USER_DETAILS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrgUserDetailsRecord> getPrimaryKey() {
        return Keys.KEY_ORG_USER_DETAILS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrgUserDetailsRecord>> getKeys() {
        return Arrays.<UniqueKey<OrgUserDetailsRecord>>asList(Keys.KEY_ORG_USER_DETAILS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OrgUserDetailsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrgUserDetailsRecord, ?>>asList(Keys.FK_ORG_USER_ORG_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrgUserDetails as(String alias) {
        return new OrgUserDetails(alias, this);
    }

    /**
     * Rename this table
     */
    public OrgUserDetails rename(String name) {
        return new OrgUserDetails(name, null);
    }
}
