/**
 * This class is generated by jOOQ
 */
package org.kaddiya.reporting.sql.commons.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.kaddiya.reporting.sql.commons.Keys;
import org.kaddiya.reporting.sql.commons.Proof;
import org.kaddiya.reporting.sql.commons.tables.records.RequestToAccessKpiRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RequestToAccessKpi extends TableImpl<RequestToAccessKpiRecord> {

    private static final long serialVersionUID = -1489808408;

    /**
     * The reference instance of <code>proof.request_to_access_kpi</code>
     */
    public static final RequestToAccessKpi REQUEST_TO_ACCESS_KPI = new RequestToAccessKpi();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RequestToAccessKpiRecord> getRecordType() {
        return RequestToAccessKpiRecord.class;
    }

    /**
     * The column <code>proof.request_to_access_kpi.REQUEST_TO_ACCESS_KPI_ID</code>.
     */
    public final TableField<RequestToAccessKpiRecord, Integer> REQUEST_TO_ACCESS_KPI_ID = createField("REQUEST_TO_ACCESS_KPI_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.request_to_access_kpi.KPI_ID</code>.
     */
    public final TableField<RequestToAccessKpiRecord, Integer> KPI_ID = createField("KPI_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.request_to_access_kpi.KPI_OWNER_ID</code>.
     */
    public final TableField<RequestToAccessKpiRecord, Integer> KPI_OWNER_ID = createField("KPI_OWNER_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.request_to_access_kpi.REQUESTER_USER_ID</code>.
     */
    public final TableField<RequestToAccessKpiRecord, Integer> REQUESTER_USER_ID = createField("REQUESTER_USER_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.request_to_access_kpi.REQUESTED_AT</code>.
     */
    public final TableField<RequestToAccessKpiRecord, Timestamp> REQUESTED_AT = createField("REQUESTED_AT", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>proof.request_to_access_kpi</code> table reference
     */
    public RequestToAccessKpi() {
        this("request_to_access_kpi", null);
    }

    /**
     * Create an aliased <code>proof.request_to_access_kpi</code> table reference
     */
    public RequestToAccessKpi(String alias) {
        this(alias, REQUEST_TO_ACCESS_KPI);
    }

    private RequestToAccessKpi(String alias, Table<RequestToAccessKpiRecord> aliased) {
        this(alias, aliased, null);
    }

    private RequestToAccessKpi(String alias, Table<RequestToAccessKpiRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Proof.PROOF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RequestToAccessKpiRecord, Integer> getIdentity() {
        return Keys.IDENTITY_REQUEST_TO_ACCESS_KPI;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RequestToAccessKpiRecord> getPrimaryKey() {
        return Keys.KEY_REQUEST_TO_ACCESS_KPI_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RequestToAccessKpiRecord>> getKeys() {
        return Arrays.<UniqueKey<RequestToAccessKpiRecord>>asList(Keys.KEY_REQUEST_TO_ACCESS_KPI_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RequestToAccessKpiRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RequestToAccessKpiRecord, ?>>asList(Keys.FK_REQUEST_TO_ACCESS_KPI_KPI_ID, Keys.FK_REQUEST_TO_ACCESS_KPI_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RequestToAccessKpi as(String alias) {
        return new RequestToAccessKpi(alias, this);
    }

    /**
     * Rename this table
     */
    public RequestToAccessKpi rename(String name) {
        return new RequestToAccessKpi(name, null);
    }
}
