/**
 * This class is generated by jOOQ
 */
package org.kaddiya.reporting.sql.commons.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.kaddiya.reporting.sql.commons.Keys;
import org.kaddiya.reporting.sql.commons.Proof;
import org.kaddiya.reporting.sql.commons.tables.records.UserProfileRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserProfile extends TableImpl<UserProfileRecord> {

    private static final long serialVersionUID = 1414517810;

    /**
     * The reference instance of <code>proof.user_profile</code>
     */
    public static final UserProfile USER_PROFILE = new UserProfile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserProfileRecord> getRecordType() {
        return UserProfileRecord.class;
    }

    /**
     * The column <code>proof.user_profile.USER_PROFILE_ID</code>.
     */
    public final TableField<UserProfileRecord, Integer> USER_PROFILE_ID = createField("USER_PROFILE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.user_profile.USER_ID</code>.
     */
    public final TableField<UserProfileRecord, Integer> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.user_profile.PROFILE_IMAGE_PATH</code>.
     */
    public final TableField<UserProfileRecord, String> PROFILE_IMAGE_PATH = createField("PROFILE_IMAGE_PATH", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("/assets/static/profileimage.png", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>proof.user_profile</code> table reference
     */
    public UserProfile() {
        this("user_profile", null);
    }

    /**
     * Create an aliased <code>proof.user_profile</code> table reference
     */
    public UserProfile(String alias) {
        this(alias, USER_PROFILE);
    }

    private UserProfile(String alias, Table<UserProfileRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserProfile(String alias, Table<UserProfileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Proof.PROOF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserProfileRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_PROFILE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserProfileRecord> getPrimaryKey() {
        return Keys.KEY_USER_PROFILE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserProfileRecord>> getKeys() {
        return Arrays.<UniqueKey<UserProfileRecord>>asList(Keys.KEY_USER_PROFILE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserProfileRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserProfileRecord, ?>>asList(Keys.FK_USER_PROFILE_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserProfile as(String alias) {
        return new UserProfile(alias, this);
    }

    /**
     * Rename this table
     */
    public UserProfile rename(String name) {
        return new UserProfile(name, null);
    }
}
