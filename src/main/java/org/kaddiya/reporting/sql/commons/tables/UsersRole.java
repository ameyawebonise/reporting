/**
 * This class is generated by jOOQ
 */
package org.kaddiya.reporting.sql.commons.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.kaddiya.reporting.sql.commons.Keys;
import org.kaddiya.reporting.sql.commons.Proof;
import org.kaddiya.reporting.sql.commons.tables.records.UsersRoleRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersRole extends TableImpl<UsersRoleRecord> {

    private static final long serialVersionUID = 1475523858;

    /**
     * The reference instance of <code>proof.users_role</code>
     */
    public static final UsersRole USERS_ROLE = new UsersRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRoleRecord> getRecordType() {
        return UsersRoleRecord.class;
    }

    /**
     * The column <code>proof.users_role.USERS_ROLE_ID</code>.
     */
    public final TableField<UsersRoleRecord, Integer> USERS_ROLE_ID = createField("USERS_ROLE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.users_role.USER_ID</code>.
     */
    public final TableField<UsersRoleRecord, Integer> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.users_role.ROLE_ID</code>.
     */
    public final TableField<UsersRoleRecord, Integer> ROLE_ID = createField("ROLE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>proof.users_role</code> table reference
     */
    public UsersRole() {
        this("users_role", null);
    }

    /**
     * Create an aliased <code>proof.users_role</code> table reference
     */
    public UsersRole(String alias) {
        this(alias, USERS_ROLE);
    }

    private UsersRole(String alias, Table<UsersRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsersRole(String alias, Table<UsersRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Proof.PROOF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UsersRoleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USERS_ROLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UsersRoleRecord> getPrimaryKey() {
        return Keys.KEY_USERS_ROLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UsersRoleRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersRoleRecord>>asList(Keys.KEY_USERS_ROLE_PRIMARY, Keys.KEY_USERS_ROLE_USER_ROLE_UNIQUE_CONSTRAINT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UsersRoleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UsersRoleRecord, ?>>asList(Keys.FK_USER_ID, Keys.FK_ROLE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsersRole as(String alias) {
        return new UsersRole(alias, this);
    }

    /**
     * Rename this table
     */
    public UsersRole rename(String name) {
        return new UsersRole(name, null);
    }
}
