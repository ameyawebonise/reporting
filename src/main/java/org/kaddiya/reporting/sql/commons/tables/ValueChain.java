/**
 * This class is generated by jOOQ
 */
package org.kaddiya.reporting.sql.commons.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.kaddiya.reporting.sql.commons.Keys;
import org.kaddiya.reporting.sql.commons.Proof;
import org.kaddiya.reporting.sql.commons.enums.ValueChainStatus;
import org.kaddiya.reporting.sql.commons.tables.records.ValueChainRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ValueChain extends TableImpl<ValueChainRecord> {

    private static final long serialVersionUID = 1446365013;

    /**
     * The reference instance of <code>proof.value_chain</code>
     */
    public static final ValueChain VALUE_CHAIN = new ValueChain();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ValueChainRecord> getRecordType() {
        return ValueChainRecord.class;
    }

    /**
     * The column <code>proof.value_chain.VALUE_CHAIN_ID</code>.
     */
    public final TableField<ValueChainRecord, Integer> VALUE_CHAIN_ID = createField("VALUE_CHAIN_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.value_chain.TITLE</code>.
     */
    public final TableField<ValueChainRecord, String> TITLE = createField("TITLE", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>proof.value_chain.USER_ID</code>.
     */
    public final TableField<ValueChainRecord, Integer> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.value_chain.START_TIME_SERIES</code>.
     */
    public final TableField<ValueChainRecord, String> START_TIME_SERIES = createField("START_TIME_SERIES", org.jooq.impl.SQLDataType.VARCHAR.length(10).nullable(false), this, "");

    /**
     * The column <code>proof.value_chain.START_DATE</code>.
     */
    public final TableField<ValueChainRecord, Date> START_DATE = createField("START_DATE", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>proof.value_chain.MAX_X</code>.
     */
    public final TableField<ValueChainRecord, Integer> MAX_X = createField("MAX_X", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.value_chain.MAX_Y</code>.
     */
    public final TableField<ValueChainRecord, Integer> MAX_Y = createField("MAX_Y", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.value_chain.MIN_X</code>.
     */
    public final TableField<ValueChainRecord, Integer> MIN_X = createField("MIN_X", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.value_chain.MIN_Y</code>.
     */
    public final TableField<ValueChainRecord, Integer> MIN_Y = createField("MIN_Y", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proof.value_chain.STATUS</code>.
     */
    public final TableField<ValueChainRecord, ValueChainStatus> STATUS = createField("STATUS", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(org.kaddiya.reporting.sql.commons.enums.ValueChainStatus.class), this, "");

    /**
     * Create a <code>proof.value_chain</code> table reference
     */
    public ValueChain() {
        this("value_chain", null);
    }

    /**
     * Create an aliased <code>proof.value_chain</code> table reference
     */
    public ValueChain(String alias) {
        this(alias, VALUE_CHAIN);
    }

    private ValueChain(String alias, Table<ValueChainRecord> aliased) {
        this(alias, aliased, null);
    }

    private ValueChain(String alias, Table<ValueChainRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Proof.PROOF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ValueChainRecord, Integer> getIdentity() {
        return Keys.IDENTITY_VALUE_CHAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ValueChainRecord> getPrimaryKey() {
        return Keys.KEY_VALUE_CHAIN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ValueChainRecord>> getKeys() {
        return Arrays.<UniqueKey<ValueChainRecord>>asList(Keys.KEY_VALUE_CHAIN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ValueChainRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ValueChainRecord, ?>>asList(Keys.FK_VALUE_CHAIN_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ValueChain as(String alias) {
        return new ValueChain(alias, this);
    }

    /**
     * Rename this table
     */
    public ValueChain rename(String name) {
        return new ValueChain(name, null);
    }
}
