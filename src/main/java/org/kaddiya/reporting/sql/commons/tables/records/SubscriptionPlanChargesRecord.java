/**
 * This class is generated by jOOQ
 */
package org.kaddiya.reporting.sql.commons.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;
import org.kaddiya.reporting.sql.commons.enums.SubscriptionPlanChargesCurrency;
import org.kaddiya.reporting.sql.commons.tables.SubscriptionPlanCharges;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubscriptionPlanChargesRecord extends UpdatableRecordImpl<SubscriptionPlanChargesRecord> implements Record6<Integer, Integer, SubscriptionPlanChargesCurrency, Double, Boolean, String> {

    private static final long serialVersionUID = -421896389;

    /**
     * Setter for <code>proof.subscription_plan_charges.PLAN_CHARGES_ID</code>.
     */
    public void setPlanChargesId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>proof.subscription_plan_charges.PLAN_CHARGES_ID</code>.
     */
    public Integer getPlanChargesId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>proof.subscription_plan_charges.PLAN_ID</code>.
     */
    public void setPlanId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>proof.subscription_plan_charges.PLAN_ID</code>.
     */
    public Integer getPlanId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>proof.subscription_plan_charges.CURRENCY</code>.
     */
    public void setCurrency(SubscriptionPlanChargesCurrency value) {
        set(2, value);
    }

    /**
     * Getter for <code>proof.subscription_plan_charges.CURRENCY</code>.
     */
    public SubscriptionPlanChargesCurrency getCurrency() {
        return (SubscriptionPlanChargesCurrency) get(2);
    }

    /**
     * Setter for <code>proof.subscription_plan_charges.AMOUNT</code>.
     */
    public void setAmount(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>proof.subscription_plan_charges.AMOUNT</code>.
     */
    public Double getAmount() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>proof.subscription_plan_charges.IS_INCLUSIVE_OF_ALL_TAXES</code>.
     */
    public void setIsInclusiveOfAllTaxes(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>proof.subscription_plan_charges.IS_INCLUSIVE_OF_ALL_TAXES</code>.
     */
    public Boolean getIsInclusiveOfAllTaxes() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>proof.subscription_plan_charges.ADDITIONAL_CHARGES</code>.
     */
    public void setAdditionalCharges(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>proof.subscription_plan_charges.ADDITIONAL_CHARGES</code>.
     */
    public String getAdditionalCharges() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<Integer, Integer, SubscriptionPlanChargesCurrency, Double, Boolean, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<Integer, Integer, SubscriptionPlanChargesCurrency, Double, Boolean, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return SubscriptionPlanCharges.SUBSCRIPTION_PLAN_CHARGES.PLAN_CHARGES_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return SubscriptionPlanCharges.SUBSCRIPTION_PLAN_CHARGES.PLAN_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<SubscriptionPlanChargesCurrency> field3() {
        return SubscriptionPlanCharges.SUBSCRIPTION_PLAN_CHARGES.CURRENCY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field4() {
        return SubscriptionPlanCharges.SUBSCRIPTION_PLAN_CHARGES.AMOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field5() {
        return SubscriptionPlanCharges.SUBSCRIPTION_PLAN_CHARGES.IS_INCLUSIVE_OF_ALL_TAXES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return SubscriptionPlanCharges.SUBSCRIPTION_PLAN_CHARGES.ADDITIONAL_CHARGES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getPlanChargesId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getPlanId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SubscriptionPlanChargesCurrency value3() {
        return getCurrency();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value4() {
        return getAmount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value5() {
        return getIsInclusiveOfAllTaxes();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getAdditionalCharges();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SubscriptionPlanChargesRecord value1(Integer value) {
        setPlanChargesId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SubscriptionPlanChargesRecord value2(Integer value) {
        setPlanId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SubscriptionPlanChargesRecord value3(SubscriptionPlanChargesCurrency value) {
        setCurrency(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SubscriptionPlanChargesRecord value4(Double value) {
        setAmount(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SubscriptionPlanChargesRecord value5(Boolean value) {
        setIsInclusiveOfAllTaxes(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SubscriptionPlanChargesRecord value6(String value) {
        setAdditionalCharges(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SubscriptionPlanChargesRecord values(Integer value1, Integer value2, SubscriptionPlanChargesCurrency value3, Double value4, Boolean value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SubscriptionPlanChargesRecord
     */
    public SubscriptionPlanChargesRecord() {
        super(SubscriptionPlanCharges.SUBSCRIPTION_PLAN_CHARGES);
    }

    /**
     * Create a detached, initialised SubscriptionPlanChargesRecord
     */
    public SubscriptionPlanChargesRecord(Integer planChargesId, Integer planId, SubscriptionPlanChargesCurrency currency, Double amount, Boolean isInclusiveOfAllTaxes, String additionalCharges) {
        super(SubscriptionPlanCharges.SUBSCRIPTION_PLAN_CHARGES);

        set(0, planChargesId);
        set(1, planId);
        set(2, currency);
        set(3, amount);
        set(4, isInclusiveOfAllTaxes);
        set(5, additionalCharges);
    }
}
